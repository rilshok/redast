{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Remote Data Storage (redast) \u00a4 redast \u00a4 Redast provides a flexible interface for storing data in different types of storages. The organization of data storage is carried out according to the principle of a data lake. Installation \u00a4 pip install redast Or from GitHub git clone git@github.com:rilshok/redast.git cd redast pip install -e . or pip install git+https://github.com/rilshok/redast.git","title":"Home"},{"location":"#remote-data-storage-redast","text":"","title":"Remote Data Storage (redast)"},{"location":"#redast","text":"Redast provides a flexible interface for storing data in different types of storages. The organization of data storage is carried out according to the principle of a data lake.","title":"redast"},{"location":"#installation","text":"pip install redast Or from GitHub git clone git@github.com:rilshok/redast.git cd redast pip install -e . or pip install git+https://github.com/rilshok/redast.git","title":"Installation"},{"location":"01-supported-storage-methods/00-index/","text":"","title":"Supported storage methods"},{"location":"01-supported-storage-methods/01-local-storage-methods/","text":"Local storage methods \u00a4 Memory storage \u00a4 Local storage of data in RAM from redast import Storage , Memory storage = Storage ( Memory ()) Drive storage \u00a4 Local storage of data on drive. To open a storage, you must specify the root folder. This call will create an empty directory ./myStorage . from redast import Storage , Drive drive = Drive ( root = \"myStorage\" , create = True ) storage = Storage ( drive )","title":"Local storage methods"},{"location":"01-supported-storage-methods/01-local-storage-methods/#local-storage-methods","text":"","title":"Local storage methods"},{"location":"01-supported-storage-methods/01-local-storage-methods/#memory-storage","text":"Local storage of data in RAM from redast import Storage , Memory storage = Storage ( Memory ())","title":"Memory storage"},{"location":"01-supported-storage-methods/01-local-storage-methods/#drive-storage","text":"Local storage of data on drive. To open a storage, you must specify the root folder. This call will create an empty directory ./myStorage . from redast import Storage , Drive drive = Drive ( root = \"myStorage\" , create = True ) storage = Storage ( drive )","title":"Drive storage"},{"location":"01-supported-storage-methods/02-cloud-storage-methods/","text":"Cloud storage methods \u00a4 Mega cloud storage \u00a4 MEGA is a cloud storage and file hosting service offered by MEGA Limited. mega.io - cloud storage website Mega.py - library for the Mega API from redast import Storage , MegaCloud email = input () password = input () mega = MegaCloud ( email = email , password = password , root = 'mystorage' ) storage = Storage ( mega )","title":"Cloud storage methods"},{"location":"01-supported-storage-methods/02-cloud-storage-methods/#cloud-storage-methods","text":"","title":"Cloud storage methods"},{"location":"01-supported-storage-methods/02-cloud-storage-methods/#mega-cloud-storage","text":"MEGA is a cloud storage and file hosting service offered by MEGA Limited. mega.io - cloud storage website Mega.py - library for the Mega API from redast import Storage , MegaCloud email = input () password = input () mega = MegaCloud ( email = email , password = password , root = 'mystorage' ) storage = Storage ( mega )","title":"Mega cloud storage"},{"location":"02-data-storage-interface/00-index/","text":"Data storage interface \u00a4 Push data into storage \u00a4 Example python result from redast import Storage , Memory storage = Storage ( Memory ()) key = storage . push ( b \"hello world\" ) print ( key ) 021ced8799296ceca557832ab941a50b4a11f83478cf141f51f933f653ab9fbcc05a037cddbed06e309bf334942c4e58cdf1a46e237911ccd7fcf9787cbc7fd0 Pull data from storage \u00a4 Example python result from redast import Storage , Memory storage = Storage ( Memory ()) data = storage . load ( key ) print ( data ) b'hello world' Check for data in storage \u00a4 Example python result from redast import Storage , Memory storage = Storage ( Memory ()) key = storage . push ( b \"hello world\" ) ok = storage . exists ( key ) bad = storage . exists ( \"brokenkey\" ) print ( ok , bad ) True False Pop data from storage \u00a4 Example python result from redast import Storage , Memory storage = Storage ( Memory ()) key = storage . push ( b \"hello world\" ) data = storage . pop ( key ) exist = storage . exists ( key ) print ( data , exist ) b'hello world' False Custom links \u00a4 The link method links the saved data to the user identifier. Example python result from redast import Storage , Memory storage = Storage ( Memory ()) storage . link ( \"hello\" ) . push ( b \"hello world\" ) data = storage . link ( \"hello\" ) . load () print ( data ) b'hello world' Any python object can act as an identifier, even a lambda function. Example python result from redast import Storage , Memory storage = Storage ( Memory ()) key = lambda x : x ** 2 storage . link ( key ) . push ( b \"squaring\" ) qrt = storage . link ( key ) . load () print ( qrt ) b'squaring' A sequence of objects can be used as an identifier. Example python result from redast import Storage , Memory storage = Storage ( Memory ()) storage . link ( \"hello\" , \"world\" ) . push ( b \"hello world\" ) data = storage . link ( \"hello\" , \"world\" ) . pop () print ( data ) b'hello world'","title":"Data storage interface"},{"location":"02-data-storage-interface/00-index/#data-storage-interface","text":"","title":"Data storage interface"},{"location":"02-data-storage-interface/00-index/#push-data-into-storage","text":"Example python result from redast import Storage , Memory storage = Storage ( Memory ()) key = storage . push ( b \"hello world\" ) print ( key ) 021ced8799296ceca557832ab941a50b4a11f83478cf141f51f933f653ab9fbcc05a037cddbed06e309bf334942c4e58cdf1a46e237911ccd7fcf9787cbc7fd0","title":"Push data into storage"},{"location":"02-data-storage-interface/00-index/#pull-data-from-storage","text":"Example python result from redast import Storage , Memory storage = Storage ( Memory ()) data = storage . load ( key ) print ( data ) b'hello world'","title":"Pull data from storage"},{"location":"02-data-storage-interface/00-index/#check-for-data-in-storage","text":"Example python result from redast import Storage , Memory storage = Storage ( Memory ()) key = storage . push ( b \"hello world\" ) ok = storage . exists ( key ) bad = storage . exists ( \"brokenkey\" ) print ( ok , bad ) True False","title":"Check for data in storage"},{"location":"02-data-storage-interface/00-index/#pop-data-from-storage","text":"Example python result from redast import Storage , Memory storage = Storage ( Memory ()) key = storage . push ( b \"hello world\" ) data = storage . pop ( key ) exist = storage . exists ( key ) print ( data , exist ) b'hello world' False","title":"Pop data from storage"},{"location":"02-data-storage-interface/00-index/#custom-links","text":"The link method links the saved data to the user identifier. Example python result from redast import Storage , Memory storage = Storage ( Memory ()) storage . link ( \"hello\" ) . push ( b \"hello world\" ) data = storage . link ( \"hello\" ) . load () print ( data ) b'hello world' Any python object can act as an identifier, even a lambda function. Example python result from redast import Storage , Memory storage = Storage ( Memory ()) key = lambda x : x ** 2 storage . link ( key ) . push ( b \"squaring\" ) qrt = storage . link ( key ) . load () print ( qrt ) b'squaring' A sequence of objects can be used as an identifier. Example python result from redast import Storage , Memory storage = Storage ( Memory ()) storage . link ( \"hello\" , \"world\" ) . push ( b \"hello world\" ) data = storage . link ( \"hello\" , \"world\" ) . pop () print ( data ) b'hello world'","title":"Custom links"},{"location":"03-data-packaging/00-index/","text":"Data packaging \u00a4 Some form of pre-processing may be required to store the data. For large storages, data compression may be appropriate. Public storage may require encryption. The REDAST supports different preprocessing.","title":"Data packaging"},{"location":"03-data-packaging/00-index/#data-packaging","text":"Some form of pre-processing may be required to store the data. For large storages, data compression may be appropriate. Public storage may require encryption. The REDAST supports different preprocessing.","title":"Data packaging"},{"location":"03-data-packaging/01-compression/","text":"Compression \u00a4 Example from redast import Storage , Memory storage = Storage ( Memory ()) data = b \"hello\" * 5 key = storage . compression . push ( data ) compressed = storage . load ( key ) data = storage . compression . load ( key ) print ( len ( compressed ), len ( data ), compressed , data , sep = \" \\n \" ) 16 25 b'x\\x9c\\xcbH\\xcd\\xc9\\xc9\\xcf\\xc0B\\x00\\x00\\x86\\xc4\\ne' b'hellohellohellohellohello'","title":"Compression"},{"location":"03-data-packaging/01-compression/#compression","text":"Example from redast import Storage , Memory storage = Storage ( Memory ()) data = b \"hello\" * 5 key = storage . compression . push ( data ) compressed = storage . load ( key ) data = storage . compression . load ( key ) print ( len ( compressed ), len ( data ), compressed , data , sep = \" \\n \" ) 16 25 b'x\\x9c\\xcbH\\xcd\\xc9\\xc9\\xcf\\xc0B\\x00\\x00\\x86\\xc4\\ne' b'hellohellohellohellohello'","title":"Compression"},{"location":"03-data-packaging/02-base64/","text":"Base64 \u00a4 Example from redast import Storage , Memory storage = Storage ( Memory ()) key = storage . base64 . push ( b \"hello world\" ) data_base64 = storage . load ( key ) data = storage . base64 . load ( key ) print ( data_base64 , data , sep = \" \\n \" ) b'aGVsbG8gd29ybGQ=' b'hello world'","title":"Base64"},{"location":"03-data-packaging/02-base64/#base64","text":"Example from redast import Storage , Memory storage = Storage ( Memory ()) key = storage . base64 . push ( b \"hello world\" ) data_base64 = storage . load ( key ) data = storage . base64 . load ( key ) print ( data_base64 , data , sep = \" \\n \" ) b'aGVsbG8gd29ybGQ=' b'hello world'","title":"Base64"},{"location":"03-data-packaging/03-json/","text":"Json \u00a4 Example from redast import Storage , Memory storage = Storage ( Memory ()) value = [ 1 , [ 2 , 3 ], dict ( a = 4 , b = \"5\" )] key = storage . json . push ( value ) data_json = storage . load ( key ) data = storage . json . load ( key ) print ( type ( data_json ) . __name__ , data_json ) print ( type ( data ) . __name__ , data ) str [1, [2, 3], {\"a\": 4, \"b\": \"5\"}] list [1, [2, 3], {'a': 4, 'b': '5'}]","title":"Json"},{"location":"03-data-packaging/03-json/#json","text":"Example from redast import Storage , Memory storage = Storage ( Memory ()) value = [ 1 , [ 2 , 3 ], dict ( a = 4 , b = \"5\" )] key = storage . json . push ( value ) data_json = storage . load ( key ) data = storage . json . load ( key ) print ( type ( data_json ) . __name__ , data_json ) print ( type ( data ) . __name__ , data ) str [1, [2, 3], {\"a\": 4, \"b\": \"5\"}] list [1, [2, 3], {'a': 4, 'b': '5'}]","title":"Json"},{"location":"03-data-packaging/04-encoding/","text":"Encoding \u00a4 Example from redast import Storage , Memory storage = Storage ( Memory ()) value = \"Hello, \u4e16\u754c\" key = storage . encoding . push ( value ) data_encoding = storage . load ( key ) data = storage . encoding . load ( key ) print ( data_encoding ) print ( data ) b'Hello, \\xe4\\xb8\\x96\\xe7\\x95\\x8c' Hello, \u4e16\u754c","title":"Encoding"},{"location":"03-data-packaging/04-encoding/#encoding","text":"Example from redast import Storage , Memory storage = Storage ( Memory ()) value = \"Hello, \u4e16\u754c\" key = storage . encoding . push ( value ) data_encoding = storage . load ( key ) data = storage . encoding . load ( key ) print ( data_encoding ) print ( data ) b'Hello, \\xe4\\xb8\\x96\\xe7\\x95\\x8c' Hello, \u4e16\u754c","title":"Encoding"},{"location":"03-data-packaging/05-pickling/","text":"Pickling of python objects \u00a4 Different types of pre-processing can be combined into a single conveyor line Example from redast import Storage , Memory storage = Storage ( Memory ()) data = dict ( a = 1 , b = 2 ) key = storage . pickling . push ( data ) data = storage . pickling . load ( key ) print ( data ) {'a': 1, 'b': 2}","title":"Pickling of python objects"},{"location":"03-data-packaging/05-pickling/#pickling-of-python-objects","text":"Different types of pre-processing can be combined into a single conveyor line Example from redast import Storage , Memory storage = Storage ( Memory ()) data = dict ( a = 1 , b = 2 ) key = storage . pickling . push ( data ) data = storage . pickling . load ( key ) print ( data ) {'a': 1, 'b': 2}","title":"Pickling of python objects"},{"location":"03-data-packaging/06-encryption/","text":"Encryption \u00a4 Encryption requires an encryption key or user password, from which the encryption key will be generated. When using encryption with a password, you must choose an arbitrary seed to create the salt. You can generate a random key Example from redast import Encryption secret = Encryption . generate_key () print ( secret ) pcu398oGPbEIoc8UgXGnmjJUZOId1bQRWJ5VmpH2gQo= Generating an encryption key using a passphrase \u00a4 Example from redast import Encryption secret1 = Encryption . generate_key ( password = \"mypassword\" , seed = 2022 ) secret2 = Encryption . generate_key ( password = \"mypassword\" , seed = 2022 ) secret3 = Encryption . generate_key ( password = \"mypassword\" , seed = 2021 ) print ( secret1 , secret2 , secret3 , sep = \" \\n \" ) DZ6xJLl9D7MkHkYt6JVef1j6o36KU7XzXzYRZrUDt0w= DZ6xJLl9D7MkHkYt6JVef1j6o36KU7XzXzYRZrUDt0w= I4sopjxisx6wb7dCkOtwoBxDvo5lnb6tctcpdpS5jGg= Encryption with an encryption key \u00a4 Example from redast import Storage , Memory , Encryption storage = Storage ( Memory ()) secret = Encryption . generate_key () key = storage . encryption ( key = secret ) . push ( b \"topsecret\" ) encrypted = storage . load ( key ) decrypted = storage . encryption ( key = secret ) . load ( key ) print ( encrypted , decrypted , sep = \" \\n \" ) b\"\\x00k\\xd0=\\x81\\xedh\\x94x\\xed\\xb0\\x14\\xe3\\r\\x96'\" b'topsecret' Encryption with a password \u00a4 Example from redast import Storage , Memory storage = Storage ( Memory ()) key = storage . encryption ( password = \"mypassword\" , seed = 10 ) . push ( b \"topsecret\" ) encrypted = storage . load ( key ) decrypted = storage . encryption ( password = \"mypassword\" , seed = 10 ) . load ( key ) print ( encrypted , decrypted , sep = \" \\n \" ) b'\\xe4\\xc6\\x0bc\\xd0\\x92\\xcb\\xaeQ\\x0ey&\\x83\\xb9\\x9d@' b'topsecret'","title":"Encryption"},{"location":"03-data-packaging/06-encryption/#encryption","text":"Encryption requires an encryption key or user password, from which the encryption key will be generated. When using encryption with a password, you must choose an arbitrary seed to create the salt. You can generate a random key Example from redast import Encryption secret = Encryption . generate_key () print ( secret ) pcu398oGPbEIoc8UgXGnmjJUZOId1bQRWJ5VmpH2gQo=","title":"Encryption"},{"location":"03-data-packaging/06-encryption/#generating-an-encryption-key-using-a-passphrase","text":"Example from redast import Encryption secret1 = Encryption . generate_key ( password = \"mypassword\" , seed = 2022 ) secret2 = Encryption . generate_key ( password = \"mypassword\" , seed = 2022 ) secret3 = Encryption . generate_key ( password = \"mypassword\" , seed = 2021 ) print ( secret1 , secret2 , secret3 , sep = \" \\n \" ) DZ6xJLl9D7MkHkYt6JVef1j6o36KU7XzXzYRZrUDt0w= DZ6xJLl9D7MkHkYt6JVef1j6o36KU7XzXzYRZrUDt0w= I4sopjxisx6wb7dCkOtwoBxDvo5lnb6tctcpdpS5jGg=","title":"Generating an encryption key using a passphrase"},{"location":"03-data-packaging/06-encryption/#encryption-with-an-encryption-key","text":"Example from redast import Storage , Memory , Encryption storage = Storage ( Memory ()) secret = Encryption . generate_key () key = storage . encryption ( key = secret ) . push ( b \"topsecret\" ) encrypted = storage . load ( key ) decrypted = storage . encryption ( key = secret ) . load ( key ) print ( encrypted , decrypted , sep = \" \\n \" ) b\"\\x00k\\xd0=\\x81\\xedh\\x94x\\xed\\xb0\\x14\\xe3\\r\\x96'\" b'topsecret'","title":"Encryption with an encryption key"},{"location":"03-data-packaging/06-encryption/#encryption-with-a-password","text":"Example from redast import Storage , Memory storage = Storage ( Memory ()) key = storage . encryption ( password = \"mypassword\" , seed = 10 ) . push ( b \"topsecret\" ) encrypted = storage . load ( key ) decrypted = storage . encryption ( password = \"mypassword\" , seed = 10 ) . load ( key ) print ( encrypted , decrypted , sep = \" \\n \" ) b'\\xe4\\xc6\\x0bc\\xd0\\x92\\xcb\\xaeQ\\x0ey&\\x83\\xb9\\x9d@' b'topsecret'","title":"Encryption with a password"},{"location":"03-data-packaging/07-pipeline/","text":"Pipeline data packing \u00a4 In this example, the data will be converted in the following order before being stored: First, the object to be saved will be pickled After pickling, the result will be compressed The compression result is then encrypted The result of encryption is converted to base64 The base 64 string is pushed into storage Example from redast import Storage , Memory storage = Storage ( Memory ()) data = [( \"hello\" , \"world\" ), \"foo\" ] auth = dict ( password = \"mypassword\" , seed = 2022 , ) pipe = storage . base64 . encryption ( ** auth ) . compression ( level = 9 ) . pickling key = pipe . push ( data ) stored = storage . load ( key ) data = pipe . load ( key ) print ( stored , data , sep = \" \\n \" ) b'z2bqXGPZoXkN_-3LB9ocrBeWi4rax7le4wJncKe1Cnz7ep-KoHgFDeV2DisMq6Az' [('hello', 'world'), 'foo'] The default packing options for pipeline data can be set when creating the storage itself Example from redast import Storage , Memory data = [( \"hello\" , \"world\" ), \"foo\" ] storage = Storage ( Memory (), compression = 9 , encryption_password = \"mypassword\" , encryption_seed = 2022 , ) pipe = storage . base64 . encryption . compression . pickling key = pipe . push ( data ) stored = storage . load ( key ) data = pipe . load ( key ) print ( stored , data , sep = \" \\n \" ) b 'z2bqXGPZoXkN_-3LB9ocrBeWi4rax7le4wJncKe1Cnz7ep-KoHgFDeV2DisMq6Az' [( 'hello' , 'world' ) , 'foo' ] Pipeline data packing with custom links \u00a4 Example from redast import Storage , Memory storage = Storage ( Memory ()) pipe = storage . base64 . compression data = b \"hello world\" pipe . link ( \"mylink\" ) . push ( data ) data = pipe . link ( \"mylink\" ) . load () print ( data ) b'hello world'","title":"Pipeline data packing"},{"location":"03-data-packaging/07-pipeline/#pipeline-data-packing","text":"In this example, the data will be converted in the following order before being stored: First, the object to be saved will be pickled After pickling, the result will be compressed The compression result is then encrypted The result of encryption is converted to base64 The base 64 string is pushed into storage Example from redast import Storage , Memory storage = Storage ( Memory ()) data = [( \"hello\" , \"world\" ), \"foo\" ] auth = dict ( password = \"mypassword\" , seed = 2022 , ) pipe = storage . base64 . encryption ( ** auth ) . compression ( level = 9 ) . pickling key = pipe . push ( data ) stored = storage . load ( key ) data = pipe . load ( key ) print ( stored , data , sep = \" \\n \" ) b'z2bqXGPZoXkN_-3LB9ocrBeWi4rax7le4wJncKe1Cnz7ep-KoHgFDeV2DisMq6Az' [('hello', 'world'), 'foo'] The default packing options for pipeline data can be set when creating the storage itself Example from redast import Storage , Memory data = [( \"hello\" , \"world\" ), \"foo\" ] storage = Storage ( Memory (), compression = 9 , encryption_password = \"mypassword\" , encryption_seed = 2022 , ) pipe = storage . base64 . encryption . compression . pickling key = pipe . push ( data ) stored = storage . load ( key ) data = pipe . load ( key ) print ( stored , data , sep = \" \\n \" ) b 'z2bqXGPZoXkN_-3LB9ocrBeWi4rax7le4wJncKe1Cnz7ep-KoHgFDeV2DisMq6Az' [( 'hello' , 'world' ) , 'foo' ]","title":"Pipeline data packing"},{"location":"03-data-packaging/07-pipeline/#pipeline-data-packing-with-custom-links","text":"Example from redast import Storage , Memory storage = Storage ( Memory ()) pipe = storage . base64 . compression data = b \"hello world\" pipe . link ( \"mylink\" ) . push ( data ) data = pipe . link ( \"mylink\" ) . load () print ( data ) b'hello world'","title":"Pipeline data packing with custom links"},{"location":"coverage/","text":".md-content { max-width: none !important; } article h1, article > a { display: none; } var coviframe = document.getElementById(\"coviframe\"); function resizeIframe() { coviframe.style.height = coviframe.contentWindow.document.documentElement.offsetHeight + 'px'; } coviframe.contentWindow.document.body.onclick = function() { coviframe.contentWindow.location.reload(); }","title":"Coverage"}]}